{"version":3,"sources":["component/usePosition.js","component/Map.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["usePosition","useState","position","setPosition","setError","onChange","coords","latitude","longitude","onError","error","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","clearWatch","Map","React","memo","value","setValue","useGoogleMaps","center","lat","lng","zoom","ref","map","google","console","log","getZoom","maps","Marker","listener","addListener","event","removeListener","handleZoomUpdate","zoomChange","nextZoom","setZoom","style","height","onClick","disabled","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"gQACaA,EAAc,WAAO,IAAD,EACCC,mBAAS,IADV,mBACxBC,EADwB,KACdC,EADc,OAELF,mBAAS,MAFJ,mBAEjBG,GAFiB,WAIzBC,EAAW,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjBH,EAAY,CACVI,SAAUD,EAAOC,SACjBC,UAAWF,EAAOE,aAGhBC,EAAU,SAACC,GACfN,EAASM,EAAMC,UAWjB,OATAC,qBAAU,WACR,IAAMC,EAAMC,UAAUC,YACtB,GAAKF,EAAL,CAIA,IAAKG,EAAUH,EAAII,cAAcZ,EAAUI,GAC3C,OAAO,kBAAMI,EAAIK,WAAWF,IAJ1BZ,EAAS,kCAKV,IACI,eAAIF,ICpBAiB,EAAMC,IAAMC,MAAK,WAAgB,IAAD,EACjBpB,mBAAS,GADQ,mBACpCqB,EADoC,KAC7BC,EAD6B,OAEbvB,IAAvBO,EAFoC,EAEpCA,SAAUC,EAF0B,EAE1BA,UAF0B,EAGdgB,YAC3B,0CACA,CACEC,OAAQ,CAAEC,IAAKnB,EAAUoB,IAAKnB,GAC9BoB,KAAM,KAJFC,EAHmC,EAGnCA,IAAKC,EAH8B,EAG9BA,IAAKC,EAHyB,EAGzBA,OAOlBC,QAAQC,IAAIjC,KAEZY,qBAAU,WACR,GAAKkB,EAAL,CAIAP,EAASO,EAAII,WACTJ,GAEF,IAAIC,EAAOI,KAAKC,OAAO,CAAElC,SAAU,CAAEwB,IAAKnB,EAAUoB,IAAKnB,GAAasB,QAExE,IAAMO,EAAWP,EAAIQ,YAAY,gBAAgB,WAC/Cf,EAASO,EAAII,cAEf,OAAO,kBAAMH,EAAOI,KAAKI,MAAMC,eAAeH,OAE7C,CAACP,EAAKC,IAET,IAAMU,EAAmB,WAAqB,IAApBC,EAAmB,uDAAN,EAC/BC,EAAWrB,EAAQoB,EACrBC,EAAW,GAGfb,EAAIc,QAAQD,IAGd,OACE,6BACE,gEACA,yBAAKd,IAAKA,EAAKgB,MAAO,CAAEC,OAAQ,OAChC,4BAAQC,QAAS,kBAAMN,EAAiB,KAAxC,WACA,4BAAQM,QAAS,kBAAMN,GAAkB,IAAIO,SAAU1B,EAAQ,GAA/D,YAGA,6BAAMA,OC9BG2B,E,uKARX,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,W,GAJQC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACLsB,QAAQtB,MAAMA,EAAMC,a,6EEzI5ByD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.3a9e2613.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nexport const usePosition = () => {\r\n  const [position, setPosition] = useState({});\r\n  const [error, setError] = useState(null);\r\n  \r\n  const onChange = ({coords}) => {\r\n    setPosition({\r\n      latitude: coords.latitude,\r\n      longitude: coords.longitude,\r\n    });\r\n  };\r\n  const onError = (error) => {\r\n    setError(error.message);\r\n  };\r\n  useEffect(() => {\r\n    const geo = navigator.geolocation;\r\n    if (!geo) {\r\n      setError('Geolocation is not supported');\r\n      return;\r\n    }\r\n    var  watcher = geo.watchPosition(onChange, onError);\r\n    return () => geo.clearWatch(watcher);\r\n  }, []);\r\n  return {...position};\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useGoogleMaps } from \"react-hook-google-maps\";\r\nimport {usePosition} from './usePosition';\r\nexport const Map = React.memo(function Map() {\r\n  const [value, setValue] = useState(0);\r\n  const {latitude, longitude} = usePosition();\r\n  const { ref, map, google } = useGoogleMaps(\r\n    \"AIzaSyC4Z5Qz97EWcoCczNn2IcYvaYG0L9pe6Rk\",\r\n    {\r\n      center: { lat: latitude, lng: longitude },\r\n      zoom: 16,\r\n    },\r\n  );\r\n  console.log(usePosition());\r\n\r\n  useEffect(() => {\r\n    if (!map) {\r\n      return;\r\n    }\r\n    // map.setLatLng(usePosition());\r\n    setValue(map.getZoom());\r\n    if (map) {\r\n      // execute when map object is ready\r\n      new google.maps.Marker({ position: { lat: latitude, lng: longitude }, map });\r\n    }\r\n    const listener = map.addListener(\"zoom_changed\", () => {\r\n      setValue(map.getZoom());\r\n    });\r\n    return () => google.maps.event.removeListener(listener);\r\n\r\n  }, [map, google]);\r\n\r\n  const handleZoomUpdate = (zoomChange = 1) => {\r\n    const nextZoom = value + zoomChange;\r\n    if (nextZoom < 0) {\r\n      return;\r\n    }\r\n    map.setZoom(nextZoom);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <span>External zoom controls example</span>\r\n      <div ref={ref} style={{ height: 500 }} />\r\n      <button onClick={() => handleZoomUpdate(1)}>Zoom In</button>\r\n      <button onClick={() => handleZoomUpdate(-1)} disabled={value < 1}>\r\n        Zoom Out\r\n      </button>\r\n      <div>{value}</div>\r\n    </div>\r\n  );\r\n});","import React, { Component }  from 'react';\nimport logo from './logo.svg';\nimport { Button, WhiteSpace, WingBlank } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css'; \nimport './App.css';\nimport {Map} from './component/Map';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n          <Map></Map>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}